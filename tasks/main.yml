---
- name: Install required packages
  apt:
    name: "{{ item }}"
    state: latest
  with_items:
    - nfs-common
    - apache2
    - libapache2-mod-php5
    - php5-gd
    - php5-mysql
    - php-cas
    - php5-ldap
    - php-mail
    - php5-mcrypt
    - php-pear
    - php5-xcache
    - exim4
    - python-mysqldb
    - pdftk
    - git

- name: get Nova name
  action: nova_get_name
  register: result
  when: IS_TARGET_OPENSTACK

- name: configure Exim4
  lineinfile:
    dest: /etc/exim4/update-exim4.conf.conf
    regexp: "dc_eximconfig_configtype='.+?'"
    line: "dc_eximconfig_configtype='internet'"
  notify: restart exim4

- name: configure Exim4 mailname
  lineinfile:
    dest: /etc/mailname
    line: "{{ mailname }}"
    create: yes
    owner: root
    group: root
    mode: 0644
  notify: restart exim4

- name: Configure NFS client
  lineinfile:
    dest: /etc/default/nfs-common
    regexp: ^STATDOPTS=(.*)(?<!(--port 4000 --outgoing-port 4002'))$
    line: STATDOPTS='\1 --port 4000 --outgoing-port 4002'
    backrefs: yes
  notify: restart nfs-common

- name: Wait for resources
  wait_for:
    host: "{{ item.0 }}"
    port: "{{ item.1 }}"
  with_together:
    - [ "{{ MySQL_VIRTUAL_IP }}", "{{ NFS_VIRTUAL_IP }}" ]
    - [ '3306', '111' ]

- name: Create drupal mysql database
  mysql_db:
    login_host: "{{ MySQL_VIRTUAL_IP }}"
    login_user: root
    login_password: ""
    name: "{{ drupal_database }}"
    encoding: utf8
  when: "primary is defined"

- name: Create drupal mysql user
  mysql_user:
    login_host: "{{ MySQL_VIRTUAL_IP }}"
    login_user: root
    login_password: ""
    name: drupalcore
    password: drupalpass
    host: "{{ ALLOWED_IPS[groups[group_names[0]].index(inventory_hostname)] if IS_TARGET_OPENSTACK else ansible_default_ipv4.address }}"
    priv: '{{ drupal_database }}.*:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER,LOCK TABLES,CREATE TEMPORARY TABLES'

- name: Enable Apache modules
  shell: a2enmod {{ item }}
  notify: restart apache
  with_items:
    - rewrite
    - ssl
    - headers
    - alias

- name: Temporarily stop Apache for local configuration
  service:
    name: apache2
    state: stopped
  notify: restart apache

- name: remount the NFS share in case it hass been corrupted by previous configuration
  mount:
    name: /var/www
    src: "{{ NFS_VIRTUAL_IP }}:/data/export"
    fstype: nfs
    opts: "rw,vers=3"
    state: "{{ item }}"
  notify: restart apache
  with_items:
    - unmounted
    - mounted

- name: Create tls directory for apache
  file:
    path: /etc/apache2/{{ certificate_path }}
    state: directory

- name: Upload ssl files
  copy:
    src: "{{ certificate_prefix }}.{{ item.0 }}"
    dest: "/etc/apache2/{{ certificate_path }}/{{ certificate_prefix }}.{{ item.0 }}"
    owner: root
    group: root
    mode: "{{ item.1 }}"
  notify: restart apache
  with_together:
    - [ crt, chain.pem, key ]
    - [ '0644', '0644', '0600' ]

- name: Configure Apache
  template:
    src: apache.j2
    dest: /etc/apache2/sites-available/default
    owner: root
    group: root
    mode: 0644
  notify: restart apache

- name: Upload custom error pages
  copy:
    src: errors
    dest: /etc/apache2/
    owner: www-data
    group: www-data
    mode: 0644
  notify: restart apache

- name: Get list of error pages
  shell: ls /etc/apache2/errors
  register: error_pages

- name: Configure custom error pages
  template:
    src: custom_error_pages.j2
    dest: /etc/apache2/conf.d/custom-error-pages
  notify: restart apache

- name: Enable SSH_AUTH_SOCK on sudo calls
  copy:
    src: ssh_auth_sock
    dest: /etc/sudoers.d/ssh_auth_sock
    validate: 'visudo -cf %s'
    owner: root
    group: root
    mode: 0440
  tags:
    - redeploy

- name: Get drupal
  git:
    repo: ssh://gitlab@git.forgeservicelab.fi:10022/druid/web.git
    dest: /var/www/
    ssh_opts: -o StrictHostKeyChecking=no
    accept_hostkey: true
    force: no
    version: "{{ drupal_revision }}"
  when: "primary is defined"
  tags:
    - redeploy

- name: Ensure drupal ownership
  file:
    path: /var/www
    owner: www-data
    group: www-data
    recurse: yes
    state: directory
  tags:
    - redeploy

- name: Upload memcached settings file
  template:
    src: settings.memcache.j2
    dest: /var/www/sites/default/settings.memcache.php
    owner: www-data
    group: www-data
  notify: restart apache

- name: Check for settings.php
  stat:
    path: /var/www/sites/default/settings.php
  register: settings
  tags:
    - redeploy

- name: Enable cache settings
  lineinfile:
    dest: /var/www/sites/default/settings.php
    line: "{{ item }}"
    insertafter: EOF
  notify: restart apache
  with_items:
    - "require 'settings.memcache.php';"
    - "$conf['cache_backends'][] = 'sites/all/modules/authcache/authcache.cache.inc';"
    - "$conf['cache_backends'][] = 'sites/all/modules/authcache/modules/authcache_builtin/authcache_builtin.cache.inc';"
  when: settings.stat.exists
  tags:
    - redeploy

- name: Flush drupal caches and revert features
  command: "{{ item }}"
  with_items:
    - drush cc all
    - drush -y updatedb
    - drush -y features-revert-all
    - drush search-api-clear
    - drush search-api-index
    - drush -y @sites cron
    - drush cc all
  when: "primary is defined and settings.stat.exists"
  tags:
    - redeploy

- name: Set up the drupal cron jobs
  cron:
    name: Trigger drupal cron hooks
    minute: '*/15'
    job: drush -y --root=/var/www @sites cron
    user: www-data
  when: "primary is defined"
  tags:
    - redeploy
